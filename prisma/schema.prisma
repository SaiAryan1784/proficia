// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
model users {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  createdAt     DateTime @default(now())
  updatedAt DateTime @updatedAt
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  tests         Test[]    // Relation to tests taken by the user
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New models for test generation

model Topic {
  id          String    @id @default(cuid())
  name        String
  description String
  imageUrl    String?
  category    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tests       Test[]
}

model Test {
  id           String     @id @default(cuid())
  title        String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  topicId      String
  status       TestStatus @default(DRAFT)
  score        Float?     // User's score if the test has been taken
  startedAt    DateTime?
  completedAt  DateTime?
  questions    Question[]
  user         users      @relation(fields: [userId], references: [id])
  topic        Topic      @relation(fields: [topicId], references: [id])
}

model Question {
  id          String       @id @default(cuid())
  testId      String
  text        String
  type        QuestionType
  options     String[]     // For multiple choice questions
  correctAnswer String?    // For simple answer questions
  explanation String?      // Explanation of the correct answer
  userAnswer  String?      // The user's answer
  isCorrect   Boolean?     // Whether the user's answer was correct
  test        Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
}

enum TestStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT
  TRUE_FALSE
}